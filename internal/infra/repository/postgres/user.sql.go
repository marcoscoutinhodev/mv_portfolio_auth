// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package postgres

import (
	"context"
)

const find = `-- name: Find :one
SELECT id, name, email, password FROM users u WHERE u.id = $1
`

func (q *Queries) Find(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, find, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, name, email, password FROM users u WHERE u.email = $1
`

func (q *Queries) FindByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const store = `-- name: Store :exec
INSERT INTO users (id, name, email, password) VALUES ($1, $2, $3, $4)
`

type StoreParams struct {
	ID       string
	Name     string
	Email    string
	Password string
}

func (q *Queries) Store(ctx context.Context, arg StoreParams) error {
	_, err := q.db.ExecContext(ctx, store,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const update = `-- name: Update :exec
UPDATE users u SET name = $2, email = $3, password = $4 WHERE u.id = $1
`

type UpdateParams struct {
	ID       string
	Name     string
	Email    string
	Password string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.ExecContext(ctx, update,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}
