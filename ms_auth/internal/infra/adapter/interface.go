package adapter

import (
	"context"

	"github.com/marcoscoutinhodev/ms_auth/internal/entity"
)

type HasherInterface interface {
	Generate(plaintext string) (string, error)
	Compare(hash, plaintext string) error
}

type EmailNotificationInterface interface {
	Register(ctx context.Context, user *entity.User, token string) error
	ForgottenPassword(ctx context.Context, user *entity.User, token string) error
}

type EncrypterInterface interface {
	/* temporary token expiration will take 60 minutes to expire and use symmetric algorithm, it is useful for email confirmation and password recovery
	 ** when using the EncryptTemporary function, you must use the DecryptTemporary function **
	 */
	EncryptTemporary(payload map[string]interface{}) (string, error)
	// the token must be generated by EncryptTemporary
	DecryptTemporary(token string) (payload map[string]interface{}, err error)
	/* the refreshToken expiration will take 12 times the amount of the token expiration time (e.g: token takes 5 minutes then refreshToken will take 60 minutes)
	** when using the Encrypt function, you must use the Decrypt function for both tokens (token and refreshToken) **
	 */
	Encrypt(payload map[string]interface{}, minutesToExpireToken uint) (token string, refreshToken string, err error)
	// the token must be generated by Encrypt
	Decrypt(token string) (payload map[string]interface{}, err error)
}

type IDGeneratorInterface interface {
	Generate() string
}
